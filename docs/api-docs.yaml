openapi: 3.0.0
info:
  title: Inventory API Documentation
  version: "1.0.0"
  description: API REST para controle de estoque, construída com Node.js, TypeScript, Express e MySQL.
servers:
  - url: http://localhost:3000/api
    description: Servidor de Desenvolvimento
paths:
  /products:
    post:
      summary: Cria um novo produto no estoque.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - quantity
                - price
              properties:
                name:
                  type: string
                  example: "Produto Teste"
                description:
                  type: string
                  example: "Descrição do produto teste"
                quantity:
                  type: integer
                  example: 10
                price:
                  type: number
                  format: float
                  example: 99.99
                categoryId:
                  type: integer
                  example: 1
      responses:
        "201":
          description: Produto criado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    get:
      summary: Lista todos os produtos do estoque.
      responses:
        "200":
          description: Lista de produtos.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    put:
      summary: Atualiza a quantidade em estoque de um produto.
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: integer
          description: ID do produto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: number
                  example: 20
      responses:
        "200":
          description: Quantidade atualizada com sucesso.
  /categories:
    post:
      summary: Cria uma nova categoria.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: "Eletrônicos"
                description:
                  type: string
                  example: "Produtos eletrônicos e gadgets."
      responses:
        "201":
          description: Categoria criada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
    get:
      summary: Lista todas as categorias.
      responses:
        "200":
          description: Lista de categorias.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    put:
      summary: Atualiza uma categoria existente.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID da categoria a ser atualizada.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Eletrônicos"
                description:
                  type: string
                  example: "Produtos eletrônicos e gadgets."
      responses:
        "200":
          description: Categoria atualizada com sucesso.
    delete:
      summary: Remove uma categoria.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID da categoria a ser removida.
      responses:
        "200":
          description: Categoria removida com sucesso.
components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Produto Teste"
        description:
          type: string
          example: "Descrição do produto teste"
        quantity:
          type: integer
          example: 10
        price:
          type: number
          format: float
          example: 99.99
        categoryId:
          type: integer
          example: 1
    Category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Eletrônicos"
        description:
          type: string
          example: "Produtos eletrônicos e gadgets."
